`include "subnormal_detection.v"
`include "prenormalization.v"

module FPU(
    input wire [31:0] FP_in1, FP_in2,
    input wire calc_mode,           //  // 0 for addition, 1 for subtraction
    input wire [1:0] round_mode,
    input wire clk, reset,

    output reg [31:0] FP_result,
    output reg res1,
    output reg res2,
    output reg [2:0] optype
);
wire is_subnormal1, is_subnormal2;
wire [23:0] normalized_mantissa1, normalized_mantissa2;
wire [7:0] main_exponent;

subnormal_detection subnorm_in1(
    .FP_in(FP_in1),
    .is_subnormal(is_subnormal1)
);
subnormal_detection subnorm_in2(
    .FP_in(FP_in2),
    .is_subnormal(is_subnormal2)
);
prenormalization prenorm(
    .FP_in1(S_01_FP_in1),
    .FP_in2(S_01_FP_in2),
    .calc_mode(calc_mode),
    .clk(clk),
    .subnormal_status({is_subnormal1, is_subnormal2}),
    .FP_norm1(normalized_mantissa1),// Assuming prenormalization outputs 24 bits 
    .FP_norm2(normalized_mantissa2),// Assuming prenormalization outputs 24 bits
    .main_exponent(main_exponent)
);

reg [1:0] S_01_round_mode;
reg S_01_calc_mode, S_01_is_subnormal1, S_01_is_subnormal2;
reg [31:0] S_01_FP_in1, S_01_FP_in2;
reg [23:0] S_01_norm_mantissa1, S_01_norm_mantissa2;

reg [1:0] S_12_round_mode;
reg S_12_calc_mode, S_12_is_subnormal1, S_12_is_subnormal2;
reg [23:0] S_12_norm_mantissa1, S_12_norm_mantissa2;
reg [7:0] S_12_main_exponent;
reg S_12_FP_1_sign, S_12_FP_2_sign; // Sign bits of the inputs

reg [25:0] S_23_FP_result;  //26th bit is 1 if sign of result is negative
reg [1:0] S_23_round_mode;
reg [7:0] S_23_main_exponent;

reg [22:0] S_34_FP_result; // 26 bits to hold the result after rounding
reg [7:0] S_34_main_exponent;
reg S_34_result_sign;
reg S_34_first_exponent;
reg S_34_extra_exponent;

always @ (posedge clk) begin
//stage 0-1
    S_01_is_subnormal1 <= is_subnormal1;
    S_01_is_subnormal2 <= is_subnormal2;
    S_01_round_mode <= round_mode;
    S_01_calc_mode <= calc_mode;
    S_01_FP_in1 <= FP_in1;
    S_01_FP_in2 <= FP_in2;

//stage 1-2
    //S_12_is_subnormal1 <= S_01_is_subnormal1;
    //S_12_is_subnormal2 <= S_01_is_subnormal2;
    S_12_FP_1_sign <= S_01_FP_in1[31];
    S_12_FP_2_sign <= S_01_FP_in2[31];  
    S_12_round_mode <= S_01_round_mode;
    S_12_calc_mode <= S_01_calc_mode;
//    S_12_norm_mantissa1 <= normalized_mantissa1;
//    S_12_norm_mantissa2 <= normalized_mantissa2;
    S_12_main_exponent <= main_exponent;

//stage 2-3
    //subtraction
    case ({S_12_calc_mode,S_12_FP_1_sign, S_12_FP_2_sign})
        3'b100 : begin S_23_FP_result <= {1'b0, normalized_mantissa1} - {1'b0, normalized_mantissa2}; optype <= 3'b100; end//both are positive
        3'b101 : begin S_23_FP_result <= {1'b0, normalized_mantissa1} + {1'b0, normalized_mantissa2}; optype <= 3'b101; end //FP_in1 is positive, FP_in2 is negative
        3'b110 : begin
                S_23_FP_result <= {1'b0, normalized_mantissa1} + {1'b0, normalized_mantissa2}; //FP_in1 is negative, FP_in2 is positive
                S_23_FP_result[25] <= 1'b1; // Result is negative
                optype <= 3'b110;
            end
        3'b111 : begin S_23_FP_result <= {1'b0, normalized_mantissa2} - {1'b0, normalized_mantissa1}; optype <= 3'b111; end //both are negative
    //addition
        3'b000 : begin S_23_FP_result <= normalized_mantissa1 + normalized_mantissa2; optype <= 3'b000; end //both are positive
        3'b001 : begin S_23_FP_result <= {1'b0, normalized_mantissa1} - {1'b0, normalized_mantissa2}; optype <= 3'b001; end//FP_in1 is positive, FP_in2 is negative
        3'b010 : begin S_23_FP_result <= {1'b0, normalized_mantissa2} - {1'b0, normalized_mantissa1}; optype <= 3'b010; end //FP_in1 is negative, FP_in2 is positive
        3'b011 : begin
                    S_23_FP_result <= {1'b0, normalized_mantissa2} + {1'b0, normalized_mantissa1}; //both are negative
                    S_23_FP_result[25] <= 1'b1; // Result is negative
                    optype <= 3'b011;
                 end

        default: begin
            S_23_FP_result <= 26'b0; // Default case, should not happen
        end
    endcase

    S_23_round_mode <= S_12_round_mode;
    S_23_main_exponent <= main_exponent;

//stage 3-4
    S_34_result_sign <= S_23_FP_result[25];
    S_34_extra_exponent <= S_23_FP_result[24];
    S_34_main_exponent <= S_23_main_exponent;
    S_34_first_exponent <= S_23_FP_result[23];
    case (S_23_round_mode)
        2'b00: begin //round to nearest even
            if (S_23_FP_result[0]) begin
                S_34_FP_result <= S_23_FP_result[22:0] + 1'b1; // Add 1 if the 25th bit is set
            end else begin
                S_34_FP_result <= S_23_FP_result[22:0]; //no change if the 25th bit is not set
            end
        end
        2'b01: begin // Round towards zero
            S_34_FP_result <= {S_23_FP_result[22:1], 1'b0}; // Just truncate the last bit
        end
        2'b10: begin // Round towards positive infinity
            if (S_23_FP_result[25]) begin // If the result is negative, do not round up
                S_34_FP_result <= S_23_FP_result[22:0]; // No change if negative
            end else begin
                S_34_FP_result <= S_23_FP_result[22:0] + 1; //round up if positive
            end
        end
        2'b11: begin //round towards negative infinity
            if (S_23_FP_result[25]) begin // If the result is negative, round down
                S_34_FP_result <= S_23_FP_result[22:0] - 1; // Round down if negative
            end else begin
                S_34_FP_result <= S_23_FP_result[22:0]; // No change if positive
            end
        end
        default: begin
            S_34_FP_result <= S_23_FP_result[22:0]; // Default case, should not happen
        end
    endcase
    if (S_34_extra_exponent) begin
        FP_result <= {S_34_result_sign, (S_34_main_exponent + 8'b1), {S_34_first_exponent, S_34_FP_result[22:1]}};
    end else begin
        if(S_34_first_exponent) begin
            FP_result <= {S_34_result_sign, S_34_main_exponent, S_34_FP_result[22:0]};
            res1<=1;
            res2<=0;
        end else begin
            FP_result <= {S_34_result_sign, S_34_main_exponent - 1'b1, S_34_FP_result[22:0] << 1'b1};
            res2<=1;
            res1<=0;
        end
        
    end

end
endmodule



module prenormalization(
    input wire [31:0] FP_in1, FP_in2,
    input wire calc_mode,
    input wire clk,
    input wire [1:0] subnormal_status,

    output reg [23:0] FP_norm1, FP_norm2,//, res
    output reg [7:0] main_exponent
);
wire compare_exponents = (FP_in1[30:23] < FP_in2[30:23])? 1'b1 : 1'b0;
wire [7:0] exp_diff = compare_exponents? (FP_in2[30:23] - FP_in1[30:23]) : (FP_in1[30:23] - FP_in2[30:23]);
always @(posedge clk) begin
    
    case(subnormal_status)
        2'b00: begin
            if(compare_exponents) begin
                FP_norm1[23:0] <= (({1'b1,FP_in1[22:0]}) >> exp_diff);
                FP_norm2[23:0] <= {1'b1, FP_in2[22:0]};
                main_exponent <= FP_in2[30:23];
            end else begin
                FP_norm2[23:0] <= (({1'b1,FP_in2[22:0]}) >> exp_diff);
                FP_norm1[23:0] <= {1'b1, FP_in1[22:0]};
                main_exponent <= FP_in1[30:23];
            end 
        end

        2'b01: begin    // only FP_in1 is subnormal
            FP_norm1[22:0] <= FP_in1[22:0];
            FP_norm2[22:0] <= (FP_in2[22:0] >> exp_diff);
            main_exponent <= FP_in2[30:23];
            FP_norm1[23] <= 1'b0;
            FP_norm2[23] <= 1'b1;
        end
        2'b10: begin    // only FP_in2 is subnormal
            FP_norm1[22:0] <= FP_in1[22:0] >> exp_diff;
            FP_norm2[22:0] <= FP_in2[22:0];
            main_exponent <= FP_in1[30:23];
            FP_norm1[23] <= 1'b1;
            FP_norm2[23] <= 1'b0;
        end
        2'b11: begin    // both inputs are subnormal
            FP_norm1[22:0] <= FP_in1[22:0];
            FP_norm2[22:0] <= FP_in2[22:0];
            main_exponent <= 8'b0;
            FP_norm1[23] <= 1'b0;
            FP_norm2[23] <= 1'b0;
        end
        default: begin
            FP_norm1 <= 23'b0;
            FP_norm2 <= 23'b0;
        end
    endcase
end
endmodule